{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Data Science and Spatial Statistics.\n",
    "\n",
    "## Maps are important element of data sceience products either as an intermediate or final outputs in data analysis work flow.\n",
    "\n",
    "## We want to apply all the knowledge we acquired so far in our data visualization journey\n",
    "\n",
    "- We want to visualize a map using folium\n",
    "\n",
    "- Derive spatial statistics from  Guerry,data a  Classic social science foundational study\n",
    "  by Andre-Michel Guerry on crime, suicide, literacy and other “moral statistics” in \n",
    "  regions  in France. We are focusing on the 'Donatns' which represents Donations to the \n",
    "  poor\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "# Import the necessary dependencies\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "from libpysal.weights.contiguity import Queen\n",
    "from libpysal import examples\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import os\n",
    "import splot\n",
    "import geopandas as gp\n",
    "import folium\n",
    "%matplotlib inline \n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import matplotlib.pyplot as plt\n",
    "from libpysal.weights.contiguity import Queen\n",
    "from libpysal import examples\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import os\n",
    "#!pip install splot\n",
    "#pip install geopandas\n",
    "#pip install fiona\n",
    "#pip install pysal\n",
    "#pip install esda\n",
    "#pip install Moran\n",
    "#pip install splot\n",
    "#conda install -c conda-forge splot\n",
    "import folium\n",
    "import splot\n",
    "import geopandas as gp\n",
    "\n",
    "import os\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "# Visualize a Map with Folium\n",
    "\n",
    "df= pd.read_excel('waterwatch_clean2.xlsx',sheet_name ='Sheet1', usecols=lambda x: 'Unnamed' not in x)\n",
    "\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "map_osm =folium.Map (location =[-33.925,18.625],zoom_start=10)\n",
    "map_osm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "# Derive a Spatial Statistics with geopspatial data library\n",
    "\n",
    "#loading shape file datasets\n",
    "\n",
    "geodata = gp.read_file(\"/Users/lawrence/guerry.shp\")\n",
    "geodata \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "# Derive the weights for donation to the poor\n",
    "\n",
    "\n",
    "y = geodata['Donatns'].values\n",
    "w = Queen.from_dataframe(geodata)\n",
    "w.transform = 'r'\n",
    "\n",
    "y"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "# Assessing  Spatial Autocorrelation \n",
    "## 1. We calculate Moran's I (Global). \n",
    "\n",
    "   ## - This is a test for global autocorrelation for a continuous attribute.\n",
    "   \n",
    "## 2. Calculate Moran's I (Local ) or called LISA\n",
    "\n",
    "## 3. Check if the observed value is statistically significant\n",
    "\n",
    "       -Therefore, in addition to visualizing Global autocorrelation statistics, \n",
    "        splot has options to  visualize local autocorrelation statistics, using \n",
    "        the spatial lag and the 'Donatns' variable in a Moran Scatterplot.\n",
    "\n",
    "## 4. Map of Local Autocorrelation with splot - Hot Spots, Cold Spots   and Spatial Outliers\n",
    "\n",
    "# 5. Combined visualizations: Scatter plot, Map, choropleth map  \n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# import necessary dependencies\n",
    "\n",
    "from esda.moran import Moran\n",
    "\n",
    "w = Queen.from_dataframe(geodata)\n",
    "moran = Moran(y, w)\n",
    "moran.I\n",
    "\n",
    "\n",
    "\n",
    "## Our value for the statistic is interpreted against a reference distribution under the null hypothesis of complete spatial randomness. PySAL uses the approach of random spatial permutations\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "# 2. Calculate Moran_Local and plot \n",
    "\n",
    "# import import dependencies\n",
    "\n",
    "from splot.esda import moran_scatterplot\n",
    "from esda.moran import Moran_Local\n",
    "\n",
    "# calculate Moran_Local and plot\n",
    "\n",
    "moran_loc = Moran_Local(y, w)\n",
    "fig, ax = moran_scatterplot(moran_loc)\n",
    "ax.set_xlabel('Donatns')\n",
    "ax.set_ylabel('Spatial Lag of Donatns')\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "# 3. Checking if Our observed value is statistically significant:\n",
    "\n",
    "# import import dependencies\n",
    "\n",
    "from splot.esda import plot_moran\n",
    "\n",
    "plot_moran(moran, zstandard=True, figsize=(10,4))\n",
    "plt.show()\n",
    "moran.p_sim"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "\n",
    "## As we visualize the Local Autocorrelation with splot - Hot Spots, Cold \n",
    "## Spots and Spatial Outliers. \n",
    "\n",
    "## We can distinguish the specific type of local spatial autocorrelation\n",
    "## as: High-High, Low-Low, High-Low, Low-High. \n",
    "\n",
    "## Where the upper right quadrant is HH, the lower left, LL, the upper \n",
    "## left LH and the lower left HL.\n",
    "\n",
    "- These types of local spatial autocorrelation describe similarities or dissimilarities\n",
    "  between a specific polygon with its neighboring polygons.\n",
    "\n",
    "- The upper left quadrant for example indicates that polygons where low values are \n",
    "  surrounded by polygons with high values (LH). The lower right quadrant shows polygons \n",
    "  with high values surrounded by neighbors with low values (HL). This indicates an \n",
    "  association of dissimilar values.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "# 4. Map of Local Autocorrelation with splot - Hot Spots, Cold Spots and Spatial Outliers\n",
    "\n",
    "# import important dependencies \n",
    "\n",
    "from splot.esda import lisa_cluster\n",
    "\n",
    "lisa_cluster(moran_loc, geodata, p=0.05, figsize = (9,9))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "# 5. Combined visualizations : Scatter plot, Map and Choropleth map\n",
    "\n",
    "# Often, it is easier to asses once statistical results or interpret these results comparing different visualizations.\n",
    "# Here we for example look at a static visualization of a Moran Scatterplot, LISA cluster map and choropleth map.\n",
    "\n",
    "# import important dependencies \n",
    "\n",
    "from splot.esda import plot_local_autocorrelation\n",
    "plot_local_autocorrelation(moran_loc, geodata, 'Donatns')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "# Quadrant 1=\n",
    "\n",
    "plot_local_autocorrelation(moran_loc, geodata, 'Donatns', quadrant=1)\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Quadrant 3=\n",
    "\n",
    "plot_local_autocorrelation(moran_loc, geodata, 'Donatns', quadrant=3)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Conclusion \n",
    "\n",
    "## -The power of data visualization can not be overemphasized.\n",
    "\n",
    "## -The diverse library of python for data visualization offers many possibilities depending on the data science problem and technical knowledge.\n",
    "\n",
    "## -It will be interesting to use spatial data visualization tool to visualize Covid-19."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "#loading shape file datasets\n",
    "\n",
    "Covid19= gp.read_file(\"/Users/lawrence/Coronavirus_COVID-19_Cases.shp\", index=0)\n",
    "Covid19.head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "\n",
    "## Thank You and Stay safe!\n"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
